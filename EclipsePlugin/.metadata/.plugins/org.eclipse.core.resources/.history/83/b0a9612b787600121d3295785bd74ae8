package com.aspose.ecplugin;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.URL;
import java.net.UnknownHostException;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;

import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.ProgressBar;

import com.aspose.ecplugin.AsposeJavaComponent;
import com.aspose.ecplugin.AsposeJavaComponents;
import com.aspose.ecplugin.wizard.WizardNewProjectCreationPageCustom;

public class AsposeComponentsManager {
	WizardNewProjectCreationPageCustom _pageOne = null;
	public AsposeComponentsManager(WizardNewProjectCreationPageCustom page)
	{
		_pageOne = page;
	}

	public boolean downloadComponents()
	{
		for(AsposeJavaComponent component:AsposeJavaComponents.list.values())
		{
			if(component.is_selected())
			{
				if(libraryAlreadyExists(component.get_downloadFileName()))
				{
					component.set_downloaded(true);

				}
				else
				{
					//if(downloadFile(component.get_downloadUrl(), component.get_downloadFileName()))
					if(downloadFileFromInternet(component.get_downloadUrl(), component.get_downloadFileName()))
					{
						component.set_downloaded(true);
					}
					else
					{
						return false;
					}
				}
			}
		}

		return true;
	}

	private boolean libraryAlreadyExists(String libFileName)
	{
		File confirmPath = new File(getLibaryDownloadPath() + libFileName);
		if(confirmPath.exists())
			return true;
		else
			return false;
	}
	/**
	 * 
	 * @param url
	 * @param libFileName
	 * @return
	 */
	private boolean downloadFile(String url, String libFileName)
	{
		try
		{
			if(!isIneternetConnected())
			{
				_pageOne.showMessage("Internet connectivity issue", "Internet connection is required to download components",SWT.ERROR | SWT.OK);
				return false;
			}
			_pageOne.progressBar.setVisible(true);
			_pageOne.progressBar.setMaximum(100);
			_pageOne.progressBar.setMinimum(0);
			_pageOne.progressBar.setSelection(0);
			
			String localPath = getLibaryDownloadPath();
			URL website = new URL(url);
			ReadableByteChannel rbc = Channels.newChannel(website.openStream());
			FileOutputStream fos = new FileOutputStream(localPath + libFileName);
			_pageOne.progressBar.setSelection(49);
			fos.getChannel().transferFrom(rbc, 0, 1 << 24);
			fos.close();
			_pageOne.progressBar.setSelection(80);
			_pageOne.progressBar.setVisible(false);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			_pageOne.progressBar.setVisible(false);
			return false;
		}

		return true;
	}

	public boolean downloadFileFromInternet(String urlStr, String outputFile) {
        //Log.level3("Downloading " + url);
        //Log.level3("To: " + outputFile);
        InputStream input;
		String localPath = getLibaryDownloadPath();
        try {
        	URL url = new URL(urlStr);
            input = url.openStream();
            byte[] buffer = new byte[1024];
            File f = new File(localPath + outputFile);
            OutputStream output = new FileOutputStream(f);
            int bytes = 0;
            //Log.progress(friendlyName.replace("/SCRIPTS/", ""));
            int lastlength = 0;
            int kilobytes = 0;
            
            _pageOne.progressBar.setVisible(true);
			_pageOne.progressBar.setMaximum(100);
			_pageOne.progressBar.setMinimum(0);
			_pageOne.progressBar.setSelection(0);

            try {
                int bytesRead;
                while ((bytesRead = input.read(buffer, 0, buffer.length)) >= 0) {
                    output.write(buffer, 0, bytesRead);
                    bytes = bytes + buffer.length;
                    kilobytes = kilobytes + 4;
                    lastlength = 6 + Integer.toString(kilobytes).length();

                }
            } finally {
                output.flush();
                output.close();

            }
        } catch (Exception ex) {
            //Log.level3("Error Downloading " + ex.getMessage());
            return false;
        }
        return true;
    }
	/**
	 * 
	 * @return
	 */
	public static boolean isIneternetConnected()
	{
		try {

			InetAddress address = InetAddress.getByName("java.sun.com");

			if(address == null)
			{
				return false;
			}

		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}

		return true;
	}

	/**
	 * 
	 * @return
	 */
	public static String getLibaryDownloadPath()
	{
		String path = "";
		path = System.getProperty("user.home");
		path = path + "/aspose/ecplugin/";
		File confirmPath = new File(path);
		if(!confirmPath.exists())
			new File(path).mkdirs();
		return path;
	}

}
