package com.aspose.ecplugin;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.URL;
import java.net.UnknownHostException;
import com.aspose.ecplugin.AsposeJavaComponent;
import com.aspose.ecplugin.AsposeJavaComponents;
import com.aspose.ecplugin.wizard.WizardNewProjectCreationPageCustom;

import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;
import java.util.zip.ZipInputStream;

import javax.xml.soap.*;
import java.util.*;
import java.net.URL;

public class AsposeComponentsManager {
	WizardNewProjectCreationPageCustom _pageOne = null;
	public AsposeComponentsManager(WizardNewProjectCreationPageCustom page)
	{
		_pageOne = page;
	}

	public boolean downloadComponents()
	{
		for(AsposeJavaComponent component:AsposeJavaComponents.list.values())
		{
			
			if(component.is_selected())
			{
				callAPI(component.get_name());
				if(libraryAlreadyExists(component.get_downloadFileName()))
				{
					component.set_downloaded(true);
				}
				else
				{
					if(downloadFileFromInternet(component.get_downloadUrl(), component.get_downloadFileName()))
					{
						component.set_downloaded(true);
					}
					else
					{
						return false;
					}
				}
			}
		}

		return true;
	}

	public static void callAPI(String compnentName)
	{
		try {
		      SOAPConnectionFactory soapConnectionFactory =
		        SOAPConnectionFactory.newInstance();
		      SOAPConnection connection =
		        soapConnectionFactory.createConnection();
		      SOAPFactory soapFactory = 
		        SOAPFactory.newInstance();

		      MessageFactory factory =
		        MessageFactory.newInstance();
		      SOAPMessage message = factory.createMessage();

		      SOAPHeader header = message.getSOAPHeader();
		      SOAPBody body = message.getSOAPBody();
		      header.detachNode();

		      Name bodyName = soapFactory.createName(
		        "GetProductRelease", "m",
		        "http://community.aspose.com/community/SecureServices/AsposeDownloads.asmx");
		      SOAPBodyElement bodyElement =
		        body.addBodyElement(bodyName);

		      Name name = soapFactory.createName("symbol");
		      SOAPElement symbol = 
		        bodyElement.addChildElement(name);
		      symbol.addTextNode("SUNW");
//symbol.addAttribute(new Name("sdfds"), "sdfs")
		      URL endpoint = new URL
		        ("http://aspose.com/GetProductRelease");
		      SOAPMessage response = 
		        connection.call(message, endpoint);

		      connection.close();

		      SOAPBody soapBody = response.getSOAPBody();

		      Iterator iterator = 
		        soapBody.getChildElements(bodyName);
		      bodyElement = (SOAPBodyElement)iterator.next();
		      String lastPrice = bodyElement.getValue();

		      System.out.print("The last price for SUNW is ");
		      System.out.println(lastPrice);

		    } catch (Exception ex) {
		      ex.printStackTrace();
		    }
	}
	/**
	 * 
	 * @param libFileName
	 * @return
	 */
	private boolean libraryAlreadyExists(String libFileName)
	{
		File confirmPath = new File(getLibaryDownloadPath() + libFileName);
		if(confirmPath.exists())
			return true;
		else
			return false;
	}
	
	
	/**
	 * 
	 * @param urlStr
	 * @param outputFile
	 * @return
	 */
	public boolean downloadFileFromInternet(String urlStr, String outputFile) {
		InputStream input;
		int bufferSize = 512;
		String localPath = getLibaryDownloadPath();
		try {
			URL url = new URL(urlStr);
			input = url.openStream();
			byte[] buffer = new byte[bufferSize];
			File f = new File(localPath + outputFile);
			OutputStream output = new FileOutputStream(f);
			int bytes = 0;
			long totalLength = input.available();
			long pages = totalLength / bufferSize;
			_pageOne.progressBar.setVisible(true);
			_pageOne.progressBar.setMaximum((int) pages);
			_pageOne.progressBar.setMinimum(0);
			_pageOne.progressBar.setSelection(0);			

			int currentPage = 0;
			try {
				int bytesRead;
				while ((bytesRead = input.read(buffer, 0, buffer.length)) >= 0) {
					output.write(buffer, 0, bytesRead);
					bytes = bytes + buffer.length;
					_pageOne.progressBar.setSelection(currentPage);
					currentPage =currentPage + 1;
				}               
				_pageOne.progressBar.setSelection(0);
				_pageOne.progressBar.setVisible(false);
				output.flush();
				output.close();
				//unZipFile(localPath + outputFile, localPath + removeExtention(outputFile) );
				extractFolder(localPath + outputFile, localPath + removeExtention(outputFile) );
			} finally {
				
			}
		} catch (Exception ex) {
			_pageOne.progressBar.setSelection(0);
			_pageOne.progressBar.setVisible(false);;
			return false;
		}
		return true;
	}
	
	/**
	 * 
	 * @param filePath
	 * @return
	 */
	public static String removeExtention(String filePath) {
	    // These first few lines the same as Justin's
	    File f = new File(filePath);

	    // if it's a directory, don't remove the extention
	    if (f.isDirectory()) return filePath;

	    String name = f.getName();

	    // Now we know it's a file - don't need to do any special hidden
	    // checking or contains() checking because of:
	    final int lastPeriodPos = name.lastIndexOf('.');
	    if (lastPeriodPos <= 0)
	    {
	        // No period after first character - return name as it was passed in
	        return filePath;
	    }
	    else
	    {
	        // Remove the last period and everything after it
	        File renamed = new File(f.getParent(), name.substring(0, lastPeriodPos));
	        return renamed.getPath();
	    }
	}
	/**
	 * 
	 * @return
	 */
	public static boolean isIneternetConnected()
	{
		try {
			InetAddress address = InetAddress.getByName(ECPluginConstants.INTERNTE_CONNNECTIVITY_PING_URL);
			if(address == null)
			{
				return false;
			}

		} catch (UnknownHostException e) {
			e.printStackTrace();
			return false;
		}

		return true;
	}

	/**
	 * 
	 * @return
	 */
	public static String getLibaryDownloadPath()
	{
		String path = "";
		path = System.getProperty("user.home");
		path = path + "/aspose/ecplugin/";
		File confirmPath = new File(path);
		if(!confirmPath.exists())
			new File(path).mkdirs();
		return path;
	}

	/**
	 * 
	 * @param zipFile
	 * @param outputFolder
	 */
	public void unZipFile(String zipFile, String outputFolder){
		 
	     byte[] buffer = new byte[1024];
	 
	     try{
	 
	    	//create output directory is not exists
	    	File folder = new File(outputFolder);
	    	if(!folder.exists()){
	    		folder.mkdir();
	    	}
	 
	    	//get the zip file content
	    	ZipInputStream zis = 
	    		new ZipInputStream(new FileInputStream(zipFile));
	    	//get the zipped file list entry
	    	ZipEntry ze = zis.getNextEntry();
	 
	    	while(ze!=null){
	 
	    	   String fileName = ze.getName();
	           File newFile = new File(outputFolder + File.separator + fileName);
	 
	           System.out.println("file unzip : "+ newFile.getAbsoluteFile());
	 
	            //create all non exists folders
	            //else you will hit FileNotFoundException for compressed folder
	            new File(newFile.getParent()).mkdirs();
	 
	            FileOutputStream fos = new FileOutputStream(newFile);             
	 
	            int len;
	            while ((len = zis.read(buffer)) > 0) {
	       		fos.write(buffer, 0, len);
	            }
	 
	            fos.close();   
	            ze = zis.getNextEntry();
	    	}
	 
	        zis.closeEntry();
	    	zis.close();
	 
	    	System.out.println("Done");
	 
	    }catch(IOException ex){
	       ex.printStackTrace(); 
	    }
	   } 
	
	static public void extractFolder(String zipFile,String newPath) throws ZipException, IOException 
	{
	    System.out.println(zipFile);
	    int BUFFER = 2048;
	    File file = new File(zipFile);

	    ZipFile zip = new ZipFile(file);
	    //String newPath = zipFile.substring(0, zipFile.length() - 4);

	    new File(newPath).mkdir();
	    Enumeration zipFileEntries = zip.entries();

	    // Process each entry
	    while (zipFileEntries.hasMoreElements())
	    {
	        // grab a zip file entry
	        ZipEntry entry = (ZipEntry) zipFileEntries.nextElement();
	        String currentEntry = entry.getName();
	        File destFile = new File(newPath, currentEntry);
	        //destFile = new File(newPath, destFile.getName());
	        File destinationParent = destFile.getParentFile();

	        // create the parent directory structure if needed
	        destinationParent.mkdirs();

	        if (!entry.isDirectory())
	        {
	            BufferedInputStream is = new BufferedInputStream(zip
	            .getInputStream(entry));
	            int currentByte;
	            // establish buffer for writing file
	            byte data[] = new byte[BUFFER];

	            // write the current file to disk
	            FileOutputStream fos = new FileOutputStream(destFile);
	            BufferedOutputStream dest = new BufferedOutputStream(fos,
	            BUFFER);

	            // read and write until last byte is encountered
	            while ((currentByte = is.read(data, 0, BUFFER)) != -1) {
	                dest.write(data, 0, currentByte);
	            }
	            dest.flush();
	            dest.close();
	            is.close();
	        }

	        //if (currentEntry.endsWith(".zip"))
	        //{
	            // found a zip file, try to open
	           // extractFolder(destFile.getAbsolutePath());
	        //}
	    }
	}
	
}
